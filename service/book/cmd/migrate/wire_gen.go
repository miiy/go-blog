// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"goblog.com/pkg/database"
	"goblog.com/pkg/environment"
	"goblog.com/pkg/logger"
	"goblog.com/service/book/internal/application"
	"goblog.com/service/book/internal/config"
)

// Injectors from wire.go:

func InitApplication(conf string) (*application.Application, func(), error) {
	configConfig, err := config.NewConfig(conf)
	if err != nil {
		return nil, nil, err
	}
	databaseConfig := providerDatabase(configConfig)
	v := providerDatabaseOption(configConfig)
	databaseDatabase, err := database.NewDatabase(databaseConfig, v...)
	if err != nil {
		return nil, nil, err
	}
	v2 := providerLoggerOption(configConfig)
	zapLogger, cleanup, err := logger.NewLogger(v2...)
	if err != nil {
		return nil, nil, err
	}
	applicationApplication := application.NewApplication(configConfig, databaseDatabase, zapLogger)
	return applicationApplication, func() {
		cleanup()
	}, nil
}

// wire.go:

func providerLoggerOption(config2 *config.Config) []logger.Option {
	return []logger.Option{logger.WithEnv(environment.Environment(config2.App.Env))}
}

func providerDatabase(config2 *config.Config) database.Config {
	return database.Config{
		Driver:   config2.Database.Driver,
		Host:     config2.Database.Host,
		Port:     config2.Database.Port,
		Username: config2.Database.Username,
		Password: config2.Database.Password,
		Database: config2.Database.Database,
	}
}

func providerDatabaseOption(config2 *config.Config) []database.Option {
	return []database.Option{database.WithEnv(environment.Environment(config2.App.Env))}
}
