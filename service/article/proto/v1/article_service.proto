syntax="proto3";

package article_service.proto;

option go_package = "github.com/miiy/go-blog/service/article/proto";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "validate/validate.proto";

message Article {
  enum ArticleStatus {
    DEFAULT = 0;
    ACTIVE = 1;
    DISABLE = 2;
  }
  int64 id = 1;
  int64 user_id = 2;
  string title = 3;
  string meta_title = 4;
  string meta_description = 5;
  google.protobuf.Timestamp published_time = 6;
  google.protobuf.Timestamp updated_time = 7;
  string from_text = 8;
  string from_url = 9;
  string summary = 10;
  string content = 11;
  ArticleStatus status = 12;
  google.protobuf.Timestamp created_at = 13;
  google.protobuf.Timestamp updated_at = 14;
}


message ArticleRequest {
  int64 id = 1;
}

message UserIdWithArticleId {
  int64 user_id = 1;
  int64 id = 2;
}

message CreateRequest {
  int64 user_id = 1;
  string title = 2                              [(validate.rules).string.max_len = 255];
  string content = 3                            [(validate.rules).string = {min_len: 1, max_len: 255}];
  Article.ArticleStatus status = 4              [(validate.rules).enum.defined_only = true];
  google.protobuf.Timestamp published_time = 5;
  google.protobuf.Timestamp updated_time = 6;
  int64 sort = 7                                [(validate.rules).int64.gte = 0];
}

message UpdateRequest {
  int64 id = 1;
  int64 user_id = 2;
  string title = 3;
  string content = 4;
  int64 status = 5;
  google.protobuf.Timestamp published_time = 6;
  google.protobuf.Timestamp updated_time = 7;
  int64 sort = 8;
}

message ListRequest {
  int64 page = 1;
  int64 per_page = 2;
  string keyword = 3;
}

message ListResponse {
  int64 total = 1;
  int64 per_page = 2;
  int64 current_page = 3;
  int64 last_page = 4;
  int64 from = 5;
  int64 to = 6;
  repeated Article data = 7;
}

service ArticleService {
  rpc Create(Article) returns (Article) {
    option (google.api.http) = {
      post: "/v1/articles"
      body: "*"
    };
  }

  rpc Retrieve(ArticleId) returns (Article) {
    option (google.api.http) = {
      get: "/v1/articles/{id}"
      body: "*"
    };
  }

  rpc Update(Article) returns (Article) {
    option (google.api.http) = {
      put: "/v1/articles/{id}"
      body: "*"
    };
  }

  rpc Delete(UserIdWithArticleId) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/articles/{id}"
      body: "*"
    };
  }

  rpc List(ListRequest) returns (ListResponse) {
    option (google.api.http) = {
      get: "/v1/articles"
    };
  }
}