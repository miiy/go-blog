// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"goblog.com/pkg/environment"
	"goblog.com/pkg/gin"
	"goblog.com/pkg/logger"
	"goblog.com/service/web/app/article"
	"goblog.com/service/web/app/book"
	"goblog.com/service/web/pkg/application"
	"goblog.com/service/web/pkg/config"
)

// Injectors from wre.go:

func InitApplication(conf string) (*application.Application, func(), error) {
	configConfig, err := config.NewConfig(conf)
	if err != nil {
		return nil, nil, err
	}
	v := providerGinOption()
	engine, err := gin.NewGin(v...)
	if err != nil {
		return nil, nil, err
	}
	v2 := providerLoggerOption()
	zapLogger, cleanup, err := logger.NewLogger(v2...)
	if err != nil {
		return nil, nil, err
	}
	articleArticle := article.NewArticle(engine, zapLogger)
	bookBook := book.NewBook(engine, zapLogger)
	applicationApplication := application.NewApplication(configConfig, engine, zapLogger, articleArticle, bookBook)
	return applicationApplication, func() {
		cleanup()
	}, nil
}

// wre.go:

func providerGinOption() []gin.Option {
	return []gin.Option{gin.WithEnv(environment.DEVELOPMENT)}
}

func providerLoggerOption() []logger.Option {
	return []logger.Option{logger.WithEnv(environment.DEVELOPMENT)}
}
