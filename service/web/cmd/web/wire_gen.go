// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"go.uber.org/zap"
	article2 "goblog.com/api/article/v1"
	"goblog.com/pkg/environment"
	"goblog.com/pkg/gin"
	"goblog.com/pkg/logger"
	"goblog.com/service/web/internal/app/article"
	"goblog.com/service/web/internal/app/book"
	"goblog.com/service/web/internal/pkg/application"
	"goblog.com/service/web/internal/pkg/config"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

// Injectors from wre.go:

func InitApplication(conf string) (*application.Application, func(), error) {
	configConfig, err := config.NewConfig(conf)
	if err != nil {
		return nil, nil, err
	}
	v := providerGinOption()
	engine, err := gin.NewGin(v...)
	if err != nil {
		return nil, nil, err
	}
	v2 := providerLoggerOption()
	zapLogger, cleanup, err := logger.NewLogger(v2...)
	if err != nil {
		return nil, nil, err
	}
	articleServiceClient, cleanup2 := providerArticleClient(zapLogger)
	articleArticle := article.NewArticle(engine, zapLogger, articleServiceClient)
	bookBook := book.NewBook(engine, zapLogger)
	applicationApplication := application.NewApplication(configConfig, engine, zapLogger, articleArticle, bookBook)
	return applicationApplication, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wre.go:

func providerGinOption() []gin.Option {
	return []gin.Option{gin.WithEnv(environment.DEVELOPMENT)}
}

func providerLoggerOption() []logger.Option {
	return []logger.Option{logger.WithEnv(environment.DEVELOPMENT)}
}

func providerArticleClient(logger2 *zap.Logger) (article2.ArticleServiceClient, func()) {

	conn, err := grpc.Dial("127.0.0.1:50051", grpc.WithBlock(), grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		logger2.
			Fatal("dit not connect: %v", zap.Error(err))
	}

	ac := article2.NewArticleServiceClient(conn)
	return ac, func() {
		defer conn.Close()
	}
}
