// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: feedback.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Feedback with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Feedback) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for Content

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedbackValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedbackValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FeedbackValidationError is the validation error returned by
// Feedback.Validate if the designated constraints aren't met.
type FeedbackValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedbackValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedbackValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedbackValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedbackValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedbackValidationError) ErrorName() string { return "FeedbackValidationError" }

// Error satisfies the builtin error interface
func (e FeedbackValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedback.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedbackValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedbackValidationError{}

// Validate checks the field values on FeedbackId with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FeedbackId) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// FeedbackIdValidationError is the validation error returned by
// FeedbackId.Validate if the designated constraints aren't met.
type FeedbackIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedbackIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedbackIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedbackIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedbackIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedbackIdValidationError) ErrorName() string { return "FeedbackIdValidationError" }

// Error satisfies the builtin error interface
func (e FeedbackIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedbackId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedbackIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedbackIdValidationError{}

// Validate checks the field values on RowsAffected with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RowsAffected) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RowsAffected

	return nil
}

// RowsAffectedValidationError is the validation error returned by
// RowsAffected.Validate if the designated constraints aren't met.
type RowsAffectedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RowsAffectedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RowsAffectedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RowsAffectedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RowsAffectedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RowsAffectedValidationError) ErrorName() string { return "RowsAffectedValidationError" }

// Error satisfies the builtin error interface
func (e RowsAffectedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRowsAffected.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RowsAffectedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RowsAffectedValidationError{}

// Validate checks the field values on CreateFeedback with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CreateFeedback) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserId() <= 0 {
		return CreateFeedbackValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	if l := utf8.RuneCountInString(m.GetContent()); l < 1 || l > 255 {
		return CreateFeedbackValidationError{
			field:  "Content",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
	}

	return nil
}

// CreateFeedbackValidationError is the validation error returned by
// CreateFeedback.Validate if the designated constraints aren't met.
type CreateFeedbackValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFeedbackValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFeedbackValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFeedbackValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFeedbackValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFeedbackValidationError) ErrorName() string { return "CreateFeedbackValidationError" }

// Error satisfies the builtin error interface
func (e CreateFeedbackValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFeedback.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFeedbackValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFeedbackValidationError{}

// Validate checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for Page

	// no validation rules for PerPage

	return nil
}

// ListRequestValidationError is the validation error returned by
// ListRequest.Validate if the designated constraints aren't met.
type ListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRequestValidationError) ErrorName() string { return "ListRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRequestValidationError{}

// Validate checks the field values on ListResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Total

	// no validation rules for PerPage

	// no validation rules for CurrentPage

	// no validation rules for LastPage

	// no validation rules for From

	// no validation rules for To

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListResponseValidationError is the validation error returned by
// ListResponse.Validate if the designated constraints aren't met.
type ListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListResponseValidationError) ErrorName() string { return "ListResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListResponseValidationError{}
