// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: userpost.proto

package userpost

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserPostServiceClient is the client API for UserPostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserPostServiceClient interface {
	CreateUserPost(ctx context.Context, in *CreateUserPostRequest, opts ...grpc.CallOption) (*UserPostId, error)
	GetUserPost(ctx context.Context, in *UserIdWithUserPostId, opts ...grpc.CallOption) (*UserPost, error)
	UpdateUserPost(ctx context.Context, in *UpdateUserPostRequest, opts ...grpc.CallOption) (*RowsAffected, error)
	UpdateUserPostSort(ctx context.Context, in *UpdateUserPostSortRequest, opts ...grpc.CallOption) (*RowsAffected, error)
	DeleteUserPost(ctx context.Context, in *UserIdWithUserPostId, opts ...grpc.CallOption) (*RowsAffected, error)
	ListUserPost(ctx context.Context, in *ListUserPostRequest, opts ...grpc.CallOption) (*ListUserPostResponse, error)
	CreateUserTag(ctx context.Context, in *CreateUserTagRequest, opts ...grpc.CallOption) (*UserTagId, error)
	GetUserTag(ctx context.Context, in *UserIdWithUserTagId, opts ...grpc.CallOption) (*UserTag, error)
	UpdateUserTag(ctx context.Context, in *UpdateUserTagRequest, opts ...grpc.CallOption) (*RowsAffected, error)
	DeleteUserTag(ctx context.Context, in *UserIdWithUserTagId, opts ...grpc.CallOption) (*RowsAffected, error)
	ListUserTag(ctx context.Context, in *ListUserTagRequest, opts ...grpc.CallOption) (*ListUserTagResponse, error)
	CreateUserTagPost(ctx context.Context, in *CreateUserTagPostRequest, opts ...grpc.CallOption) (*CreateUserTagPostResponse, error)
	DeleteUserTagPost(ctx context.Context, in *CreateUserTagPostRequest, opts ...grpc.CallOption) (*CreateUserTagPostResponse, error)
	PostUserTagPostList(ctx context.Context, in *PostUserTagPostListRequest, opts ...grpc.CallOption) (*PostUserTagPostListResponse, error)
}

type userPostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserPostServiceClient(cc grpc.ClientConnInterface) UserPostServiceClient {
	return &userPostServiceClient{cc}
}

func (c *userPostServiceClient) CreateUserPost(ctx context.Context, in *CreateUserPostRequest, opts ...grpc.CallOption) (*UserPostId, error) {
	out := new(UserPostId)
	err := c.cc.Invoke(ctx, "/userpost.UserPostService/CreateUserPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostServiceClient) GetUserPost(ctx context.Context, in *UserIdWithUserPostId, opts ...grpc.CallOption) (*UserPost, error) {
	out := new(UserPost)
	err := c.cc.Invoke(ctx, "/userpost.UserPostService/GetUserPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostServiceClient) UpdateUserPost(ctx context.Context, in *UpdateUserPostRequest, opts ...grpc.CallOption) (*RowsAffected, error) {
	out := new(RowsAffected)
	err := c.cc.Invoke(ctx, "/userpost.UserPostService/UpdateUserPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostServiceClient) UpdateUserPostSort(ctx context.Context, in *UpdateUserPostSortRequest, opts ...grpc.CallOption) (*RowsAffected, error) {
	out := new(RowsAffected)
	err := c.cc.Invoke(ctx, "/userpost.UserPostService/UpdateUserPostSort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostServiceClient) DeleteUserPost(ctx context.Context, in *UserIdWithUserPostId, opts ...grpc.CallOption) (*RowsAffected, error) {
	out := new(RowsAffected)
	err := c.cc.Invoke(ctx, "/userpost.UserPostService/DeleteUserPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostServiceClient) ListUserPost(ctx context.Context, in *ListUserPostRequest, opts ...grpc.CallOption) (*ListUserPostResponse, error) {
	out := new(ListUserPostResponse)
	err := c.cc.Invoke(ctx, "/userpost.UserPostService/ListUserPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostServiceClient) CreateUserTag(ctx context.Context, in *CreateUserTagRequest, opts ...grpc.CallOption) (*UserTagId, error) {
	out := new(UserTagId)
	err := c.cc.Invoke(ctx, "/userpost.UserPostService/CreateUserTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostServiceClient) GetUserTag(ctx context.Context, in *UserIdWithUserTagId, opts ...grpc.CallOption) (*UserTag, error) {
	out := new(UserTag)
	err := c.cc.Invoke(ctx, "/userpost.UserPostService/GetUserTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostServiceClient) UpdateUserTag(ctx context.Context, in *UpdateUserTagRequest, opts ...grpc.CallOption) (*RowsAffected, error) {
	out := new(RowsAffected)
	err := c.cc.Invoke(ctx, "/userpost.UserPostService/UpdateUserTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostServiceClient) DeleteUserTag(ctx context.Context, in *UserIdWithUserTagId, opts ...grpc.CallOption) (*RowsAffected, error) {
	out := new(RowsAffected)
	err := c.cc.Invoke(ctx, "/userpost.UserPostService/DeleteUserTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostServiceClient) ListUserTag(ctx context.Context, in *ListUserTagRequest, opts ...grpc.CallOption) (*ListUserTagResponse, error) {
	out := new(ListUserTagResponse)
	err := c.cc.Invoke(ctx, "/userpost.UserPostService/ListUserTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostServiceClient) CreateUserTagPost(ctx context.Context, in *CreateUserTagPostRequest, opts ...grpc.CallOption) (*CreateUserTagPostResponse, error) {
	out := new(CreateUserTagPostResponse)
	err := c.cc.Invoke(ctx, "/userpost.UserPostService/CreateUserTagPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostServiceClient) DeleteUserTagPost(ctx context.Context, in *CreateUserTagPostRequest, opts ...grpc.CallOption) (*CreateUserTagPostResponse, error) {
	out := new(CreateUserTagPostResponse)
	err := c.cc.Invoke(ctx, "/userpost.UserPostService/DeleteUserTagPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostServiceClient) PostUserTagPostList(ctx context.Context, in *PostUserTagPostListRequest, opts ...grpc.CallOption) (*PostUserTagPostListResponse, error) {
	out := new(PostUserTagPostListResponse)
	err := c.cc.Invoke(ctx, "/userpost.UserPostService/PostUserTagPostList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserPostServiceServer is the server API for UserPostService service.
// All implementations must embed UnimplementedUserPostServiceServer
// for forward compatibility
type UserPostServiceServer interface {
	CreateUserPost(context.Context, *CreateUserPostRequest) (*UserPostId, error)
	GetUserPost(context.Context, *UserIdWithUserPostId) (*UserPost, error)
	UpdateUserPost(context.Context, *UpdateUserPostRequest) (*RowsAffected, error)
	UpdateUserPostSort(context.Context, *UpdateUserPostSortRequest) (*RowsAffected, error)
	DeleteUserPost(context.Context, *UserIdWithUserPostId) (*RowsAffected, error)
	ListUserPost(context.Context, *ListUserPostRequest) (*ListUserPostResponse, error)
	CreateUserTag(context.Context, *CreateUserTagRequest) (*UserTagId, error)
	GetUserTag(context.Context, *UserIdWithUserTagId) (*UserTag, error)
	UpdateUserTag(context.Context, *UpdateUserTagRequest) (*RowsAffected, error)
	DeleteUserTag(context.Context, *UserIdWithUserTagId) (*RowsAffected, error)
	ListUserTag(context.Context, *ListUserTagRequest) (*ListUserTagResponse, error)
	CreateUserTagPost(context.Context, *CreateUserTagPostRequest) (*CreateUserTagPostResponse, error)
	DeleteUserTagPost(context.Context, *CreateUserTagPostRequest) (*CreateUserTagPostResponse, error)
	PostUserTagPostList(context.Context, *PostUserTagPostListRequest) (*PostUserTagPostListResponse, error)
	mustEmbedUnimplementedUserPostServiceServer()
}

// UnimplementedUserPostServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserPostServiceServer struct {
}

func (UnimplementedUserPostServiceServer) CreateUserPost(context.Context, *CreateUserPostRequest) (*UserPostId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserPost not implemented")
}
func (UnimplementedUserPostServiceServer) GetUserPost(context.Context, *UserIdWithUserPostId) (*UserPost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPost not implemented")
}
func (UnimplementedUserPostServiceServer) UpdateUserPost(context.Context, *UpdateUserPostRequest) (*RowsAffected, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPost not implemented")
}
func (UnimplementedUserPostServiceServer) UpdateUserPostSort(context.Context, *UpdateUserPostSortRequest) (*RowsAffected, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPostSort not implemented")
}
func (UnimplementedUserPostServiceServer) DeleteUserPost(context.Context, *UserIdWithUserPostId) (*RowsAffected, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserPost not implemented")
}
func (UnimplementedUserPostServiceServer) ListUserPost(context.Context, *ListUserPostRequest) (*ListUserPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserPost not implemented")
}
func (UnimplementedUserPostServiceServer) CreateUserTag(context.Context, *CreateUserTagRequest) (*UserTagId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserTag not implemented")
}
func (UnimplementedUserPostServiceServer) GetUserTag(context.Context, *UserIdWithUserTagId) (*UserTag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTag not implemented")
}
func (UnimplementedUserPostServiceServer) UpdateUserTag(context.Context, *UpdateUserTagRequest) (*RowsAffected, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserTag not implemented")
}
func (UnimplementedUserPostServiceServer) DeleteUserTag(context.Context, *UserIdWithUserTagId) (*RowsAffected, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserTag not implemented")
}
func (UnimplementedUserPostServiceServer) ListUserTag(context.Context, *ListUserTagRequest) (*ListUserTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserTag not implemented")
}
func (UnimplementedUserPostServiceServer) CreateUserTagPost(context.Context, *CreateUserTagPostRequest) (*CreateUserTagPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserTagPost not implemented")
}
func (UnimplementedUserPostServiceServer) DeleteUserTagPost(context.Context, *CreateUserTagPostRequest) (*CreateUserTagPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserTagPost not implemented")
}
func (UnimplementedUserPostServiceServer) PostUserTagPostList(context.Context, *PostUserTagPostListRequest) (*PostUserTagPostListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostUserTagPostList not implemented")
}
func (UnimplementedUserPostServiceServer) mustEmbedUnimplementedUserPostServiceServer() {}

// UnsafeUserPostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserPostServiceServer will
// result in compilation errors.
type UnsafeUserPostServiceServer interface {
	mustEmbedUnimplementedUserPostServiceServer()
}

func RegisterUserPostServiceServer(s grpc.ServiceRegistrar, srv UserPostServiceServer) {
	s.RegisterService(&UserPostService_ServiceDesc, srv)
}

func _UserPostService_CreateUserPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostServiceServer).CreateUserPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpost.UserPostService/CreateUserPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostServiceServer).CreateUserPost(ctx, req.(*CreateUserPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPostService_GetUserPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdWithUserPostId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostServiceServer).GetUserPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpost.UserPostService/GetUserPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostServiceServer).GetUserPost(ctx, req.(*UserIdWithUserPostId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPostService_UpdateUserPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostServiceServer).UpdateUserPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpost.UserPostService/UpdateUserPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostServiceServer).UpdateUserPost(ctx, req.(*UpdateUserPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPostService_UpdateUserPostSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPostSortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostServiceServer).UpdateUserPostSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpost.UserPostService/UpdateUserPostSort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostServiceServer).UpdateUserPostSort(ctx, req.(*UpdateUserPostSortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPostService_DeleteUserPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdWithUserPostId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostServiceServer).DeleteUserPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpost.UserPostService/DeleteUserPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostServiceServer).DeleteUserPost(ctx, req.(*UserIdWithUserPostId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPostService_ListUserPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostServiceServer).ListUserPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpost.UserPostService/ListUserPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostServiceServer).ListUserPost(ctx, req.(*ListUserPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPostService_CreateUserTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostServiceServer).CreateUserTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpost.UserPostService/CreateUserTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostServiceServer).CreateUserTag(ctx, req.(*CreateUserTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPostService_GetUserTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdWithUserTagId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostServiceServer).GetUserTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpost.UserPostService/GetUserTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostServiceServer).GetUserTag(ctx, req.(*UserIdWithUserTagId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPostService_UpdateUserTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostServiceServer).UpdateUserTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpost.UserPostService/UpdateUserTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostServiceServer).UpdateUserTag(ctx, req.(*UpdateUserTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPostService_DeleteUserTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdWithUserTagId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostServiceServer).DeleteUserTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpost.UserPostService/DeleteUserTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostServiceServer).DeleteUserTag(ctx, req.(*UserIdWithUserTagId))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPostService_ListUserTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostServiceServer).ListUserTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpost.UserPostService/ListUserTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostServiceServer).ListUserTag(ctx, req.(*ListUserTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPostService_CreateUserTagPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserTagPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostServiceServer).CreateUserTagPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpost.UserPostService/CreateUserTagPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostServiceServer).CreateUserTagPost(ctx, req.(*CreateUserTagPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPostService_DeleteUserTagPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserTagPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostServiceServer).DeleteUserTagPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpost.UserPostService/DeleteUserTagPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostServiceServer).DeleteUserTagPost(ctx, req.(*CreateUserTagPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPostService_PostUserTagPostList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUserTagPostListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPostServiceServer).PostUserTagPostList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userpost.UserPostService/PostUserTagPostList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPostServiceServer).PostUserTagPostList(ctx, req.(*PostUserTagPostListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserPostService_ServiceDesc is the grpc.ServiceDesc for UserPostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserPostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userpost.UserPostService",
	HandlerType: (*UserPostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserPost",
			Handler:    _UserPostService_CreateUserPost_Handler,
		},
		{
			MethodName: "GetUserPost",
			Handler:    _UserPostService_GetUserPost_Handler,
		},
		{
			MethodName: "UpdateUserPost",
			Handler:    _UserPostService_UpdateUserPost_Handler,
		},
		{
			MethodName: "UpdateUserPostSort",
			Handler:    _UserPostService_UpdateUserPostSort_Handler,
		},
		{
			MethodName: "DeleteUserPost",
			Handler:    _UserPostService_DeleteUserPost_Handler,
		},
		{
			MethodName: "ListUserPost",
			Handler:    _UserPostService_ListUserPost_Handler,
		},
		{
			MethodName: "CreateUserTag",
			Handler:    _UserPostService_CreateUserTag_Handler,
		},
		{
			MethodName: "GetUserTag",
			Handler:    _UserPostService_GetUserTag_Handler,
		},
		{
			MethodName: "UpdateUserTag",
			Handler:    _UserPostService_UpdateUserTag_Handler,
		},
		{
			MethodName: "DeleteUserTag",
			Handler:    _UserPostService_DeleteUserTag_Handler,
		},
		{
			MethodName: "ListUserTag",
			Handler:    _UserPostService_ListUserTag_Handler,
		},
		{
			MethodName: "CreateUserTagPost",
			Handler:    _UserPostService_CreateUserTagPost_Handler,
		},
		{
			MethodName: "DeleteUserTagPost",
			Handler:    _UserPostService_DeleteUserTagPost_Handler,
		},
		{
			MethodName: "PostUserTagPostList",
			Handler:    _UserPostService_PostUserTagPostList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userpost.proto",
}
