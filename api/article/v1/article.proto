syntax="proto3";

option go_package = "goblog.com/api/article";
option java_multiple_files = true;
option java_package = "com.goblog.article";
option java_outer_classname = "ArticleProto";

package article;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";

message Article {
  enum ArticleStatus {
    DEFAULT = 0;
    ACTIVE = 1;
    DISABLE = 2;
  }
  uint64 id = 1;
  uint64 user_id = 2;
  uint64 category_id = 3;
  string title = 4;
  string meta_title = 5;
  string meta_description = 6;
  google.protobuf.Timestamp published_time = 7;
  google.protobuf.Timestamp updated_time = 8;
  string from_text = 9;
  string from_url = 10;
  string summary = 11;
  string content = 12;
  ArticleStatus status = 13;
  // Output only. Creation time of the article.
  google.protobuf.Timestamp create_time = 14;
  google.protobuf.Timestamp update_time = 15;
}

// Request to create a new article.
message CreateArticleRequest {
  // The parent resource where this article will be created.
  //  // Format: publishers/{publisher}
  string parent = 1;

  // The article to create.
  Article article = 2 [(google.api.field_behavior) = REQUIRED];

  // The ID to use for the article, which will become the final component of
  // the article's resource name.
  //
  // This value should be 4-63 characters, and valid characters
  // are /[a-z][0-9]-/.
  string article_id = 3;
}

// Request to create articles in batch.
message BatchCreateArticlesRequest {
  map<string, Article> articles = 1 [(google.api.field_behavior) = REQUIRED];
}

// Response for creating articles in batch.
message BatchCreateArticlesResponse {
  repeated Article articles = 1;
}

// Request to get a article.
message GetArticleRequest {
  uint64 id = 1 [(google.api.field_behavior) = REQUIRED];
}

// Request to update a article.
message UpdateArticleRequest {
  uint64 id = 1 [(google.api.field_behavior) = REQUIRED];

  Article article = 2 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 3;
}

// Request to delete a article.
message DeleteArticleRequest {
  uint64 id = 1 [(google.api.field_behavior) = REQUIRED];
}

message ListArticlesRequest {
  int64 page = 1;
  int64 page_size = 2;
}

message ListArticlesResponse {
  int64 total = 1;
  int64 page_size = 2;
  int64 current_page = 3;
  repeated Article articles = 7;
}

service ArticleService {
  rpc CreateArticle(CreateArticleRequest) returns (Article) {
    option (google.api.http) = {
      post: "/v1/articles"
      body: "article"
    };
  }

  rpc BatchCreateArticles(BatchCreateArticlesRequest) returns (BatchCreateArticlesResponse) {
    option (google.api.http) = {
      post: "/v1/articles:batchCreate"
      body: "*"
    };
  }

  rpc GetArticle(GetArticleRequest) returns (Article) {
    option (google.api.http) = {
      get: "/v1/articles/{id}"
    };
  }

  rpc UpdateArticle(UpdateArticleRequest) returns (Article) {
    option (google.api.http) = {
      put: "/v1/articles/{article.id}"
      body: "article"
    };
  }

  rpc DeleteArticle(DeleteArticleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/articles/{id}"
    };
  }

  rpc ListArticles(ListArticlesRequest) returns (ListArticlesResponse) {
    option (google.api.http) = {
      get: "/v1/articles"
    };
  }
}